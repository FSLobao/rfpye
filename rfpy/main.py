# AUTOGENERATED! DO NOT EDIT! File to edit: 00_main.ipynb (unless otherwise specified).

__all__ = ['binary_file_generator', 'parse_input']

# Cell
def binary_file_generator(bin_file: Union[str, Path], marker: bytes = b'\x00UUUU', block_size: int = 4096) -> Iterator[bytes]:
    """
    str, bytes, int > bytes
    :param bin_file: arquivo binario que contém os dados
    :param marker: separador de blocos
    :param block_size: tamanho em bytes que é "lido" por vez no arquivo, evitando problemas de memória
    :return: bloco em formato binario

    Gerador que fornece a partir de de um arquivo binário, um bloco binário por vez.

    """
    with open(bin_file, mode='rb') as bfile:
        # O primeiro bloco do arquivo é o cabeçalho e tem 36 bytes de tamanho.
        yield bfile.read(36)
        # As demais partes podem prosseguir normalmente
        current = b''
        while True:
            block = bfile.read(block_size)
            if not block:  # end-of-file
                # yield current
                return None
            current += block
            while True:
                markerpos = current.find(marker)
                if markerpos < 0:
                    break
                yield current[:markerpos]
                current = current[markerpos + len(marker):]

# Cell
@call_parse
def parse_input(entrada:Param("Diretório contendo arquivos .bin", str),
                saida:Param("Diretório para salvar os arquivos de saída", str),
                recursivo:Param("Buscar arquivos de maneira recursiva?", bool_arg)=True,
                pastas:Param("Limita a busca às pastas", Iterable[str]) = None,
                verbose:Param("Imprimir mensagens de execução?", bool_arg) = False):

        lista_bins = get_files(entrada, extensions=['.bin'], recurse=recursivo, folders=pastas)

        if verbose:
            print(lista_bins)
        return lista_bins